// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using AutopilotQuick.DellBiosCatalog;
//
//    var dellBiosCatalog = DellBiosCatalog.FromJson(jsonString);

namespace AutopilotQuick.DellBiosCatalog
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class DellBiosCatalog
    {
        [JsonProperty("CatalogVersion")]
        public string CatalogVersion { get; set; }

        [JsonProperty("Status")]
        public object Status { get; set; }

        [JsonProperty("Component")]
        public string Component { get; set; }

        [JsonProperty("ReleaseDate")]
        public DateTimeOffset ReleaseDate { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("DellVersion")]
        public string DellVersion { get; set; }

        [JsonProperty("Url")]
        public Uri Url { get; set; }

        [JsonProperty("VendorVersion")]
        public string VendorVersion { get; set; }

        [JsonProperty("Criticality")]
        public string Criticality { get; set; }

        [JsonProperty("FileName")]
        public string FileName { get; set; }

        [JsonProperty("SizeMB")]
        public string SizeMb { get; set; }

        [JsonProperty("PackageID")]
        public string PackageId { get; set; }

        [JsonProperty("PackageType")]
        public string PackageType { get; set; }

        [JsonProperty("ReleaseID")]
        public string ReleaseId { get; set; }

        [JsonProperty("Category")]
        public string Category { get; set; }

        [JsonProperty("SupportedDevices")]
        public string SupportedDevices { get; set; }

        [JsonProperty("SupportedBrand")]
        public SupportedBrandUnion SupportedBrand { get; set; }

        [JsonProperty("SupportedModel")]
        public SupportedBrandUnion SupportedModel { get; set; }

        [JsonProperty("SupportedSystemID")]
        public SupportedSystemIdClass SupportedSystemId { get; set; }

        [JsonProperty("SupportedOperatingSystems")]
        public SupportedSystemIdClass SupportedOperatingSystems { get; set; }

        [JsonProperty("SupportedArchitecture")]
        public SupportedSystemIdClass SupportedArchitecture { get; set; }

        [JsonProperty("HashMD5")]
        public string HashMd5 { get; set; }
    }

    public partial class SupportedSystemIdClass
    {
        [JsonProperty("value")]
        public List<string> Value { get; set; }

        [JsonProperty("Count")]
        public long Count { get; set; }
    }

    public partial struct SupportedBrandUnion
    {
        public string String;
        public SupportedSystemIdClass SupportedSystemIdClass;

        public static implicit operator SupportedBrandUnion(string String) => new SupportedBrandUnion { String = String };
        public static implicit operator SupportedBrandUnion(SupportedSystemIdClass SupportedSystemIdClass) => new SupportedBrandUnion { SupportedSystemIdClass = SupportedSystemIdClass };
    }

    public partial class DellBiosCatalog
    {
        public static List<DellBiosCatalog> FromJson(string json) => JsonConvert.DeserializeObject<List<DellBiosCatalog>>(json, AutopilotQuick.DellBiosCatalog.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<DellBiosCatalog> self) => JsonConvert.SerializeObject(self, AutopilotQuick.DellBiosCatalog.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                SupportedBrandUnionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class SupportedBrandUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SupportedBrandUnion) || t == typeof(SupportedBrandUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new SupportedBrandUnion { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<SupportedSystemIdClass>(reader);
                    return new SupportedBrandUnion { SupportedSystemIdClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type SupportedBrandUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SupportedBrandUnion)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.SupportedSystemIdClass != null)
            {
                serializer.Serialize(writer, value.SupportedSystemIdClass);
                return;
            }
            throw new Exception("Cannot marshal type SupportedBrandUnion");
        }

        public static readonly SupportedBrandUnionConverter Singleton = new SupportedBrandUnionConverter();
    }
}
